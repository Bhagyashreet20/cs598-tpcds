[
    {
        "role": "system",
        "content": "You are an expert Text-to-SQL assistant. Your goal is to provide correct SQL queries in accordance with the given text description. Please use the SQL dialect compatible with duckDB. Your output should only contain the SQL code. No explanation or introductory sentences surrounding the SQL response is needed. You are given schema information containing table names in <tableName> tags and columns in <columns> tags. Here is the schema information:"
    },
    {
        "role": "user",
        "content": "<tableName>catalog_sales</tableName>\n<columns>cs_sold_date_sk, cs_sold_time_sk, cs_ship_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_bill_addr_sk, cs_ship_customer_sk, cs_ship_cdemo_sk, cs_ship_hdemo_sk, cs_ship_addr_sk, cs_call_center_sk, cs_catalog_page_sk, cs_ship_mode_sk, cs_warehouse_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_list_price, cs_sales_price, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, cs_ext_tax, cs_coupon_amt, cs_ext_ship_cost, cs_net_paid, cs_net_paid_inc_tax, cs_net_paid_inc_ship, cs_net_paid_inc_ship_tax, cs_net_profit</columns>\n\n<tableName>date_dim</tableName>\n<columns>d_date_sk, d_date_id, d_date, d_month_seq, d_week_seq, d_quarter_seq, d_year, d_dow, d_moy, d_dom, d_qoy, d_fy_year, d_fy_quarter_seq, d_fy_week_seq, d_day_name, d_quarter_name, d_holiday, d_weekend, d_following_holiday, d_first_dom, d_last_dom, d_same_day_ly, d_same_day_lq, d_current_day, d_current_week, d_current_month, d_current_quarter, d_current_year</columns>\n\n<tableName>customer_address</tableName>\n<columns>ca_address_sk, ca_address_id, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type</columns>\n\n<tableName>call_center</tableName>\n<columns>cc_call_center_sk, cc_call_center_id, cc_rec_start_date, cc_rec_end_date, cc_closed_date_sk, cc_open_date_sk, cc_name, cc_class, cc_employees, cc_sq_ft, cc_hours, cc_manager, cc_mkt_id, cc_mkt_class, cc_mkt_desc, cc_market_manager, cc_division, cc_division_name, cc_company, cc_company_name, cc_street_number, cc_street_name, cc_street_type, cc_suite_number, cc_city, cc_county, cc_state, cc_zip, cc_country, cc_gmt_offset, cc_tax_percentage</columns>\n\n<tableName>catalog_returns</tableName>\n<columns>cr_returned_date_sk, cr_returned_time_sk, cr_item_sk, cr_refunded_customer_sk, cr_refunded_cdemo_sk, cr_refunded_hdemo_sk, cr_refunded_addr_sk, cr_returning_customer_sk, cr_returning_cdemo_sk, cr_returning_hdemo_sk, cr_returning_addr_sk, cr_call_center_sk, cr_catalog_page_sk, cr_ship_mode_sk, cr_warehouse_sk, cr_reason_sk, cr_order_number, cr_return_quantity, cr_return_amount, cr_return_tax, cr_return_amt_inc_tax, cr_fee, cr_return_ship_cost, cr_refunded_cash, cr_reversed_charge, cr_store_credit, cr_net_loss</columns>\n\n<tableName>customer_demographics</tableName>\n<columns>cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count</columns>\n\n<tableName>inventory</tableName>\n<columns>inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand</columns>"
    },
    {
        "role": "system",
        "content": "Here is the user question:"
    },
    {
        "role": "user",
        "content": "This query calculates the number of orders, total shipping costs, and total net profits from catalog sales in specific counties and states for a given 60-day period. It focuses on non-returned sales that were filled from an alternate warehouse. The query selects data from catalog_sales (aliased as \"cs1\"), date_dim, customer_address, and call_center tables. It filters the data based on the date range between '2002-04-01' and 60 days after that date. The geographical criteria include the state 'WV' and specific county names: 'Ziebach County,' 'Luce County,' 'Richland County,' 'Daviess County,' and 'Barrow County.'\n\nTo ensure non-returned sales filled from an alternate warehouse, it uses subqueries. It checks if there exists a related record in catalog_sales (aliased as \"cs2\") with the same order number but a different warehouse. Additionally, it ensures that there are no corresponding records in the catalog_returns table (aliased as \"cr1\") for the same order number.\n\nFinally, the results are ordered by the count of distinct order numbers and limited to the top 100 records. The aggregated values are presented with aliases: \"order count\" for the number of orders, \"total shipping cost\" for the sum of shipping costs, and \"total net profit\" for the sum of net profits."
    },
    {
        "role": "system",
        "content": "Here are the 3 critical rules for the interactions you must abide:\n<rules>1.do not  Wrap the generated SQL code within SQL code markdown format. Also, do not include the SQL keyword in the beginning of the response.\n2. If I don't tell you to find a limited set of results, limit to 100.\n3. Only use tables and columns from the list provided, where each table name can be found within <tableName> and columns within <columns></rules>"
    }
]